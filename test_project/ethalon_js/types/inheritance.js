function (exports, require, __RuntyperAutogeneratedImport) {
    __RuntyperAutogeneratedImport.internal.t([[
            "/types/inheritance:A",
            { type: "interface", properties: { x: { type: "number" } } }
        ], [
            "/types/inheritance:B",
            { type: "interface", properties: { y: { type: "number", optional: true } }, heritage: [{ type: "type_reference", name: "/types/inheritance:A" }] }
        ], [
            "/types/inheritance:C",
            { type: "interface", properties: { z: { type: "number" } }, heritage: [{ type: "type_reference", name: "/types/inheritance:B" }] }
        ], [
            "/types/inheritance:Name",
            { type: "interface", properties: { name: { type: "string" } }, index: { keyType: { type: "string" }, valueType: { type: "union", types: [{ type: "string" }, { type: "boolean" }] } } }
        ], [
            "/types/inheritance:NameWithValue",
            { type: "interface", properties: { isNameWithValue: { type: "constant", value: true } }, heritage: [{ type: "type_reference", name: "/types/inheritance:Name" }, { type: "type_reference", name: "/types/inheritance:Wrap", typeArguments: [{ type: "string" }] }] }
        ], [
            "/types/inheritance:Wrap",
            { type: "alias", body: { type: "object", properties: { value: { type: "generic_parameter", name: "T" } } }, typeParameters: [{ name: "T" }] }
        ], [
            "/types/inheritance:WrapWithName",
            { type: "interface", properties: { name: { type: "string" } }, heritage: [{ type: "type_reference", name: "/types/inheritance:Wrap", typeArguments: [{ type: "generic_parameter", name: "T" }] }], typeParameters: [{ name: "T" }] }
        ], [
            "/types/inheritance:WrappedNamedNumber",
            { type: "interface", properties: { isNumber: { type: "constant", value: true } }, heritage: [{ type: "type_reference", name: "/types/inheritance:WrapWithName", typeArguments: [{ type: "number" }] }] }
        ]]);
}
