function (exports, require, __RuntyperAutogeneratedImport) {
    let obj = [{ a: 5, b: { c: "a" } }];
    let tup = [0, { a: { b: "c" } }];
    const x = "b";
    let y = 5;
    let bigObj = { a: 5, b: 10, z: { y: { x: [1, 2, 3] } } };
    var NS;
    (function (NS) {
        NS.obj = { a: 5, b: { c: "a" } };
        typeof NS.obj === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:NS.obj", NS.obj);
    })(NS || (NS = {}));
    let { f } = { f: 5 };
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:BigObjTypeof", { type: "alias", body: { type: "value_reference", name: "/types/typeof:bigObj" } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:ConstTypeof", { type: "alias", body: { type: "value_reference", name: "/types/typeof:x" } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:DestructuredVarType", { type: "alias", body: { type: "value_reference", name: "/types/typeof:f" } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:NamespacedObjectType", { type: "alias", body: { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "value_reference", name: "/types/typeof:NS.obj" } } } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:ObjectTypeof", { type: "alias", body: { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "index_access", index: { type: "value_reference", name: "/types/typeof:x" }, object: { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "value_reference", name: "/types/typeof:obj" } } } } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:TupleTypeof", { type: "alias", body: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "value_reference", name: "/types/typeof:tup" } } } } });
    __RuntyperAutogeneratedImport.refTypes.set("/types/typeof:VarTypeof", { type: "alias", body: { type: "value_reference", name: "/types/typeof:y" } });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:NS.obj", { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "constant", value: "a" } } } } });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:bigObj", { type: "object", properties: { a: { type: "number" }, b: { type: "number" }, z: { type: "object", properties: { y: { type: "object", properties: { x: { type: "array", valueType: { type: "number" } } } } } } } });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:f", { type: "index_access", index: { type: "constant", value: "f" }, object: { type: "object", properties: { f: { type: "number" } } } });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:obj", { type: "array", valueType: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "constant", value: "a" } } } } } });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:tup", { type: "tuple", valueTypes: [{ type: "number" }, { type: "object", properties: { a: { type: "object", properties: { b: { type: "constant", value: "c" } } } } }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:x", { type: "constant", value: "b" });
    __RuntyperAutogeneratedImport.valueTypes.set("/types/typeof:y", { type: "number" });
    typeof bigObj === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:bigObj", bigObj);
    typeof f === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:f", f);
    typeof obj === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:obj", obj);
    typeof tup === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:tup", tup);
    typeof x === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:x", x);
    typeof y === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/types/typeof:y", y);
}
