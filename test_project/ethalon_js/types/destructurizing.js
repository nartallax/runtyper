function (exports, require, tslib_1, __RuntyperAutogeneratedImport, simple_1) {
    var ObjWithExplicitType;
    (function (ObjWithExplicitType) {
        var _a, _b;
        _a = { a: 5, b: { c: 10, d: 15 } }, ObjWithExplicitType.a = _a.a, _b = _a.b, ObjWithExplicitType.c = _b.c, ObjWithExplicitType.d = _b.d;
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:ObjWithExplicitType.a",
                ObjWithExplicitType.a
            ], [
                "/types/destructurizing:ObjWithExplicitType.c",
                ObjWithExplicitType.c
            ], [
                "/types/destructurizing:ObjWithExplicitType.d",
                ObjWithExplicitType.d
            ]]);
    })(ObjWithExplicitType || (ObjWithExplicitType = {}));
    var ObjWithoutExplicitType;
    (function (ObjWithoutExplicitType) {
        var _a, _b;
        _a = { a: 5, b: { c: 10, d: 15 } }, ObjWithoutExplicitType.a = _a.a, _b = _a.b, ObjWithoutExplicitType.c = _b.c, ObjWithoutExplicitType.d = _b.d;
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:ObjWithoutExplicitType.a",
                ObjWithoutExplicitType.a
            ], [
                "/types/destructurizing:ObjWithoutExplicitType.c",
                ObjWithoutExplicitType.c
            ], [
                "/types/destructurizing:ObjWithoutExplicitType.d",
                ObjWithoutExplicitType.d
            ]]);
    })(ObjWithoutExplicitType || (ObjWithoutExplicitType = {}));
    var ArrayWithExplicitType;
    (function (ArrayWithExplicitType) {
        var _a;
        _a = (0, tslib_1.__read)([1, "f"], 2), ArrayWithExplicitType.c = _a[0], ArrayWithExplicitType.d = _a[1];
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:ArrayWithExplicitType.c",
                ArrayWithExplicitType.c
            ], [
                "/types/destructurizing:ArrayWithExplicitType.d",
                ArrayWithExplicitType.d
            ]]);
    })(ArrayWithExplicitType || (ArrayWithExplicitType = {}));
    var ArrayWithoutExplicitType;
    (function (ArrayWithoutExplicitType) {
        var _a, _b;
        _a = (0, tslib_1.__read)([1, "f"], 2), ArrayWithoutExplicitType.c = _a[0], ArrayWithoutExplicitType.d = _a[1];
        _b = (0, tslib_1.__read)([false, null], 2), ArrayWithoutExplicitType.a = _b[0], ArrayWithoutExplicitType.b = _b[1];
        ArrayWithoutExplicitType.h = [false, null];
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:ArrayWithoutExplicitType.a",
                ArrayWithoutExplicitType.a
            ], [
                "/types/destructurizing:ArrayWithoutExplicitType.b",
                ArrayWithoutExplicitType.b
            ], [
                "/types/destructurizing:ArrayWithoutExplicitType.c",
                ArrayWithoutExplicitType.c
            ], [
                "/types/destructurizing:ArrayWithoutExplicitType.d",
                ArrayWithoutExplicitType.d
            ], [
                "/types/destructurizing:ArrayWithoutExplicitType.h",
                ArrayWithoutExplicitType.h
            ]]);
    })(ArrayWithoutExplicitType || (ArrayWithoutExplicitType = {}));
    var ObjectRenamingAtDestructurization;
    (function (ObjectRenamingAtDestructurization) {
        var _a;
        _a = { a: 5, b: { c: 10 } }, ObjectRenamingAtDestructurization.aaa = _a.a, ObjectRenamingAtDestructurization.ccc = _a.b.c;
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:ObjectRenamingAtDestructurization.aaa",
                ObjectRenamingAtDestructurization.aaa
            ], [
                "/types/destructurizing:ObjectRenamingAtDestructurization.ccc",
                ObjectRenamingAtDestructurization.ccc
            ]]);
    })(ObjectRenamingAtDestructurization || (ObjectRenamingAtDestructurization = {}));
    var MixedDestr;
    (function (MixedDestr) {
        var _a, _b, _c;
        _a = (0, tslib_1.__read)([null, { a: [6] }], 2), _b = (0, tslib_1.__read)(_a[1].a, 1), MixedDestr.b = _b[0];
        _c = (0, tslib_1.__read)({ c: [{ d: "yep" }] }.c, 1), MixedDestr.d = _c[0].d;
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:MixedDestr.b",
                MixedDestr.b
            ], [
                "/types/destructurizing:MixedDestr.d",
                MixedDestr.d
            ]]);
    })(MixedDestr || (MixedDestr = {}));
    var RestDestr;
    (function (RestDestr) {
        var _a, _b;
        _a = (0, tslib_1.__read)([1, 2, 3, 4, 5]), RestDestr.a = _a[0], RestDestr.b = _a[1], RestDestr.c = _a.slice(2);
        _b = (0, tslib_1.__read)({ x: [1, 2, 3, 4, 5] }.x), RestDestr.x = _b[0], RestDestr.y = _b[1], RestDestr.z = _b.slice(2);
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:RestDestr.a",
                RestDestr.a
            ], [
                "/types/destructurizing:RestDestr.b",
                RestDestr.b
            ], [
                "/types/destructurizing:RestDestr.c",
                RestDestr.c
            ], [
                "/types/destructurizing:RestDestr.x",
                RestDestr.x
            ], [
                "/types/destructurizing:RestDestr.y",
                RestDestr.y
            ], [
                "/types/destructurizing:RestDestr.z",
                RestDestr.z
            ]]);
    })(RestDestr || (RestDestr = {}));
    var NamedTypedDestruct;
    (function (NamedTypedDestruct) {
        var _a, _b, _c, _d, _e;
        NamedTypedDestruct.x = { x: 5, y: 10 }.x;
        _a = (0, tslib_1.__read)([5, 10], 2), NamedTypedDestruct.y = _a[1];
        _b = (0, tslib_1.__read)([{ x: 5, y: 10 }], 1), NamedTypedDestruct.z = _b[0];
        let pp = { a: { x: 1, y: 1 }, b: { x: 2, y: 2 } };
        NamedTypedDestruct.p = pp.a;
        NamedTypedDestruct.pppppp = pp.a.x;
        let myPoint = { x: 1, y: 2 };
        _c = (0, tslib_1.__read)([[myPoint]], 1), NamedTypedDestruct.ppp = _c[0];
        _d = (0, tslib_1.__read)([[{ x: 1, y: 2 }]], 1), NamedTypedDestruct.pppp = _d[0];
        _e = (0, tslib_1.__read)([[simple_1.typePointToBeRequiredExternally]], 1), NamedTypedDestruct.ppppp = _e[0];
        __RuntyperAutogeneratedImport.Runtyper.internal.f([[
                "/types/destructurizing:NamedTypedDestruct.myPoint",
                myPoint
            ], [
                "/types/destructurizing:NamedTypedDestruct.p",
                NamedTypedDestruct.p
            ], [
                "/types/destructurizing:NamedTypedDestruct.pp",
                pp
            ], [
                "/types/destructurizing:NamedTypedDestruct.ppp",
                NamedTypedDestruct.ppp
            ], [
                "/types/destructurizing:NamedTypedDestruct.pppp",
                NamedTypedDestruct.pppp
            ], [
                "/types/destructurizing:NamedTypedDestruct.ppppp",
                NamedTypedDestruct.ppppp
            ], [
                "/types/destructurizing:NamedTypedDestruct.pppppp",
                NamedTypedDestruct.pppppp
            ], [
                "/types/destructurizing:NamedTypedDestruct.x",
                NamedTypedDestruct.x
            ], [
                "/types/destructurizing:NamedTypedDestruct.y",
                NamedTypedDestruct.y
            ], [
                "/types/destructurizing:NamedTypedDestruct.z",
                NamedTypedDestruct.z
            ]]);
    })(NamedTypedDestruct || (NamedTypedDestruct = {}));
    __RuntyperAutogeneratedImport.Runtyper.internal.t([[
            "/types/destructurizing:MixedTypeB",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:MixedDestr.b" } }
        ], [
            "/types/destructurizing:MixedTypeD",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:MixedDestr.d" } }
        ], [
            "/types/destructurizing:NamedDestrA",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.p" } }
        ], [
            "/types/destructurizing:NamedDestrX",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.x" } }
        ], [
            "/types/destructurizing:NamedDestrY",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.y" } }
        ], [
            "/types/destructurizing:NamedDestrZ",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.z" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.Point",
            { type: "interface", properties: { x: { type: "number" }, y: { type: "number" } } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.Point2",
            { type: "interface", properties: { x: { type: "generic_parameter", name: "T" }, y: { type: "generic_parameter", name: "T" } }, typeParameters: [{ name: "T" }] }
        ], [
            "/types/destructurizing:NamedTypedDestruct.PointArr",
            { type: "alias", body: { type: "tuple", valueTypes: [{ type: "number" }, { type: "number" }] } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.TwoPoints",
            { type: "interface", properties: { a: { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.Point" }, b: { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.Point" } } }
        ], [
            "/types/destructurizing:RenamedTypeA",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ObjectRenamingAtDestructurization.aaa" } }
        ], [
            "/types/destructurizing:RenamedTypeC",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ObjectRenamingAtDestructurization.ccc" } }
        ], [
            "/types/destructurizing:RestA",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:RestDestr.a" } }
        ], [
            "/types/destructurizing:RestC",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:RestDestr.c" } }
        ], [
            "/types/destructurizing:RestZ",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:RestDestr.z" } }
        ], [
            "/types/destructurizing:TypeFromArrayDestr1",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ArrayWithExplicitType.d" } }
        ], [
            "/types/destructurizing:TypeFromArrayDestr2",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ArrayWithoutExplicitType.c" } }
        ], [
            "/types/destructurizing:TypeFromArrayDestr3",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ArrayWithoutExplicitType.b" } }
        ], [
            "/types/destructurizing:TypeFromArrayDestr4",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ArrayWithoutExplicitType.h" } }
        ], [
            "/types/destructurizing:TypeFromObjDestr1",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ObjWithExplicitType.c" } }
        ], [
            "/types/destructurizing:TypeFromObjDestr2",
            { type: "alias", body: { type: "value_reference", name: "/types/destructurizing:ObjWithoutExplicitType.a" } }
        ]]);
    __RuntyperAutogeneratedImport.Runtyper.internal.v([[
            "/types/destructurizing:ArrayWithExplicitType.c",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "tuple", valueTypes: [{ type: "number" }, { type: "string" }] } }
        ], [
            "/types/destructurizing:ArrayWithExplicitType.d",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "tuple", valueTypes: [{ type: "number" }, { type: "string" }] } }
        ], [
            "/types/destructurizing:ArrayWithoutExplicitType.a",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "broken", file: "/types/destructurizing", node: "export let [a, b] = [false, null]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [false, null] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:ArrayWithoutExplicitType.b",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "broken", file: "/types/destructurizing", node: "export let [a, b] = [false, null]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [false, null] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:ArrayWithoutExplicitType.c",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [c, d] = [1, \"f\"]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [1, \"f\"] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:ArrayWithoutExplicitType.d",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [c, d] = [1, \"f\"]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [1, \"f\"] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:ArrayWithoutExplicitType.h",
            { type: "array", valueType: { type: "union", types: [{ type: "boolean" }, { type: "constant", value: null }] } }
        ], [
            "/types/destructurizing:MixedDestr.b",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [,{a: [b]}] = [null, {a: [6]}]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [null, {a: [6]}] (of kind ArrayLiteralExpression)" } } } }
        ], [
            "/types/destructurizing:MixedDestr.d",
            { type: "index_access", index: { type: "constant", value: "d" }, object: { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "object", properties: { c: { type: "broken", file: "/types/destructurizing", node: "export const {c: [{d}]} = {c: [{d: \"yep\"}]}", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [{d: \"yep\"}] (of kind ArrayLiteralExpression)" } } } } } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.myPoint",
            { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.Point" }
        ], [
            "/types/destructurizing:NamedTypedDestruct.p",
            { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.pp" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.pp",
            { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.TwoPoints" }
        ], [
            "/types/destructurizing:NamedTypedDestruct.ppp",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [ppp] = [[myPoint]]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [[myPoint]] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.pppp",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [pppp] = [[{x: 1, y: 2} as Point2<number>]]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [[{x: 1, y: 2} as Point2<number>]] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.ppppp",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "broken", file: "/types/destructurizing", node: "export const [ppppp] = [[typePointToBeRequiredExternally]]", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [[typePointToBeRequiredExternally]] (of kind ArrayLiteralExpression)" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.pppppp",
            { type: "index_access", index: { type: "constant", value: "x" }, object: { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "value_reference", name: "/types/destructurizing:NamedTypedDestruct.pp" } } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.x",
            { type: "index_access", index: { type: "constant", value: "x" }, object: { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.Point" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.y",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.PointArr" } }
        ], [
            "/types/destructurizing:NamedTypedDestruct.z",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "tuple", valueTypes: [{ type: "union", types: [{ type: "type_reference", name: "/types/destructurizing:NamedTypedDestruct.Point" }, { type: "constant", value: null }] }] } }
        ], [
            "/types/destructurizing:ObjWithExplicitType.a",
            { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } }
        ], [
            "/types/destructurizing:ObjWithExplicitType.c",
            { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } } }
        ], [
            "/types/destructurizing:ObjWithExplicitType.d",
            { type: "index_access", index: { type: "constant", value: "d" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } } }
        ], [
            "/types/destructurizing:ObjWithoutExplicitType.a",
            { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } }
        ], [
            "/types/destructurizing:ObjWithoutExplicitType.c",
            { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } } }
        ], [
            "/types/destructurizing:ObjWithoutExplicitType.d",
            { type: "index_access", index: { type: "constant", value: "d" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" }, d: { type: "number" } } } } } } }
        ], [
            "/types/destructurizing:ObjectRenamingAtDestructurization.aaa",
            { type: "index_access", index: { type: "constant", value: "a" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" } } } } } }
        ], [
            "/types/destructurizing:ObjectRenamingAtDestructurization.ccc",
            { type: "index_access", index: { type: "constant", value: "c" }, object: { type: "index_access", index: { type: "constant", value: "b" }, object: { type: "object", properties: { a: { type: "number" }, b: { type: "object", properties: { c: { type: "number" } } } } } } }
        ], [
            "/types/destructurizing:RestDestr.a",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "array", valueType: { type: "number" } } }
        ], [
            "/types/destructurizing:RestDestr.b",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "array", valueType: { type: "number" } } }
        ], [
            "/types/destructurizing:RestDestr.c",
            { type: "index_access", index: { type: "constant", value: 2 }, object: { type: "array", valueType: { type: "number" } }, rest: true }
        ], [
            "/types/destructurizing:RestDestr.x",
            { type: "index_access", index: { type: "constant", value: 0 }, object: { type: "index_access", index: { type: "constant", value: "x" }, object: { type: "object", properties: { x: { type: "broken", file: "/types/destructurizing", node: "export const {x: [x, y, ...z]} = {x: [1, 2, 3, 4, 5]}", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [1, 2, 3, 4, 5] (of kind ArrayLiteralExpression)" } } } } }
        ], [
            "/types/destructurizing:RestDestr.y",
            { type: "index_access", index: { type: "constant", value: 1 }, object: { type: "index_access", index: { type: "constant", value: "x" }, object: { type: "object", properties: { x: { type: "broken", file: "/types/destructurizing", node: "export const {x: [x, y, ...z]} = {x: [1, 2, 3, 4, 5]}", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [1, 2, 3, 4, 5] (of kind ArrayLiteralExpression)" } } } } }
        ], [
            "/types/destructurizing:RestDestr.z",
            { type: "index_access", index: { type: "constant", value: 2 }, object: { type: "index_access", index: { type: "constant", value: "x" }, object: { type: "object", properties: { x: { type: "broken", file: "/types/destructurizing", node: "export const {x: [x, y, ...z]} = {x: [1, 2, 3, 4, 5]}", message: "when the variable is destructurized, array value may or may not infer to a tuple type; therefore, accurate type inferrence is not supported: [1, 2, 3, 4, 5] (of kind ArrayLiteralExpression)" } } } }, rest: true }
        ]]);
}
