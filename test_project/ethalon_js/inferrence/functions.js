function (exports, require, __RuntyperAutogeneratedImport) {
    function mul2(value) {
        return value * 2;
    }
    exports.mul2 = mul2;
    function add(a, b) {
        return a + b;
    }
    exports.add = add;
    let myX = arg => arg + 5;
    exports.myX = myX;
    let varFunc = x => x === "5" ? 5 : null;
    exports.varFunc = varFunc;
    let varFunc2 = (x) => x === "5" ? 5 : null;
    exports.varFunc2 = varFunc2;
    function destFn({ a, b }) {
        console.log(b, a);
    }
    exports.destFn = destFn;
    function valueOrDefault(value) {
        return value || 5;
    }
    exports.valueOrDefault = valueOrDefault;
    function valueOrDefault2(value = 5) {
        return value;
    }
    exports.valueOrDefault2 = valueOrDefault2;
    function getPoint() {
        return { x: 5, y: 10, z: 15 };
    }
    exports.getPoint = getPoint;
    function reverseType(x) {
        return x;
    }
    exports.reverseType = reverseType;
    __RuntyperAutogeneratedImport.refTypes.set("/inferrence/functions:X", { type: "interface", properties: {}, callSignatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "arg", valueType: { type: "number" } }], returnType: { type: "number" } }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:add", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "a", valueType: { type: "number" } }, { type: "parameter", name: "b", valueType: { type: "number" } }], returnType: { type: "number" }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:destFn", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", valueType: { type: "object", properties: { a: { type: "number" }, b: { type: "string" } } } }], returnType: { type: "constant", value: void 0 }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:getPoint", { type: "function", signatures: [{ type: "call_signature", returnType: { type: "reference", name: "/types/simple:Point" }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:mul2", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "value", valueType: { type: "number" } }], returnType: { type: "number" }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:myX", { type: "reference", name: "/inferrence/functions:X" });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:reverseType", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "x", valueType: { type: "number" } }], returnType: { type: "string" } }, { type: "call_signature", parameters: [{ type: "parameter", name: "x", valueType: { type: "string" } }], returnType: { type: "number" } }, { type: "call_signature", parameters: [{ type: "parameter", name: "x", valueType: { type: "union", types: [{ type: "string" }, { type: "number" }] } }], returnType: { type: "union", types: [{ type: "string" }, { type: "number" }] }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:valueOrDefault", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "value", valueType: { type: "number" }, optional: true }], returnType: { type: "number" }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:valueOrDefault2", { type: "function", signatures: [{ type: "call_signature", parameters: [{ type: "parameter", name: "value", valueType: { type: "number" }, optional: true }], returnType: { type: "number" }, hasImplementation: true }] });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:varFunc", { type: "call_signature", parameters: [{ type: "parameter", name: "x", valueType: { type: "string" } }], returnType: { type: "union", types: [{ type: "number" }, { type: "constant", value: null }] } });
    __RuntyperAutogeneratedImport.valueTypes.set("/inferrence/functions:varFunc2", { type: "call_signature", parameters: [{ type: "parameter", name: "x", valueType: { type: "string" } }], returnType: { type: "constant_union", value: new Set([5, null]) } });
    typeof add === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:add", add);
    typeof destFn === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:destFn", destFn);
    typeof getPoint === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:getPoint", getPoint);
    typeof mul2 === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:mul2", mul2);
    typeof myX === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:myX", myX);
    typeof reverseType === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:reverseType", reverseType);
    typeof valueOrDefault === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:valueOrDefault", valueOrDefault);
    typeof valueOrDefault2 === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:valueOrDefault2", valueOrDefault2);
    typeof varFunc === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:varFunc", varFunc);
    typeof varFunc2 === "function" && __RuntyperAutogeneratedImport.functionsByName.set("/inferrence/functions:varFunc2", varFunc2);
}
